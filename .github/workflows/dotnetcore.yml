name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: Build solution
        run: |
          git submodule update --init --recursive
          dotnet restore Responses.sln
          dotnet build -c Release Responses/Responses.csproj

      - name: Run unit tests
        run: |
          dotnet test test/Responses.Tests/Responses.Tests.csproj
      
      - name: Run unit tests coverage
        run: |
          dotnet test  /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:ThresholdType=line /p:CoverletOutput=./lcov test/Responses.Tests/Responses.Tests.csproj

      - name: Codecov
        uses: codecov/codecov-action@v1.0.6
        with:
          # User defined upload name. Visible in Codecov UI
          #name: # optional
          # Repository upload token - get it from codecov.io. Required only for private repositories
          token: ${{ secrets.CODECOV_TOKEN }}
          # Path to coverage file to upload
          file: test/Responses.Tests/lcov.info
          # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
          #flags: # optional
          # Specify whether or not CI build should fail if Codecov runs into an error during upload
          #fail_ci_if_error: # optional

      - name: Generate NuGet package
        run: |
          dotnet pack -c Release
      
      - name: publish on version change
        uses: rohith/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: Responses/Responses.csproj # Relative to repository root
          # VERSION_FILE_PATH: Directory.Build.props # Filepath with version info, relative to repository root. Defaults to project file
          VERSION_REGEX: <Version>(.*)<\/Version> # Regex pattern to extract version info in a capturing group
          # VERSION_STATIC: Bypasses version resolution; useful for external providers like Nerdbank.GitVersioning
          # TAG_COMMIT: true # Flag to enable / disalge git tagging
          # TAG_FORMAT: v* # Format of the git tag, [*] gets replaced with version
          NUGET_KEY: ${{ secrets.nuget_token }} # nuget.org API key
          # PACKAGE_NAME: NuGet package name, required when it's different from project name. Defaults to project name
          #Get-ChildItem -Path E:\projetos\GitHub\Responses\Responses\bin\Release\* -Include *.nupkg | Select-Object -ExpandProperty FullName | %{dotnet nuget push $_ ${{ secrets.nuget_token }} -s https://api.nuget.org/v3/index.json}
          

      #- name: Publish Nuget to GitHub registry
      # run: dotnet nuget push ./*.nupkg -k ${GITHUB_TOKEN} -s https://nuget.pkg.github.com/slipalison/index.json --skip-duplicate --no-symbols 
      #  env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}

      #- name: Push generated package to GitHub registry
      #  run: |
      #    dir Responses\bin\Release\*.nupkg
      #    nuget push Responses\bin\Release\*.nupkg -Source "GPR" -SkipDuplicate
